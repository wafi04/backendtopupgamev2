generator client {
  provider = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
  relationMode = "prisma"
}

model User {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(100)
  username         String             @unique @db.VarChar(50)
  password         String             @db.VarChar(255)
  email            String?            @unique @db.VarChar(100)
  whatsapp         String?            @db.VarChar(20)
  balance          Int                @default(0)
  role             String             @db.VarChar(20) @default("Member")
  apiKey           String?            @unique @db.VarChar(64) @map("api_key")
  isDeleted        Boolean            @default(false) @map("is_deleted")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  deletedAt        DateTime?          @map("deleted_at")
  isEmailVerified  Boolean            @default(false) @map("is_email_verified")
  // Relations
  accounts          Account[]
  sessions          Session[]
  transactions      Transaction[]
  verificationTokens VerificationToken[]
  memberships       Membership[]

  @@index([username, balance])
  @@index([role, balance])
  @@map("users")
}

model Account {
  id                String    @id @default(cuid())
  userId            Int
  provider          String    @db.VarChar(50)
  providerAccountId String    @map("provider_account_id") @db.VarChar(100)
  accessToken       String?   @db.Text @map("access_token")
  refreshToken      String?   @db.Text @map("refresh_token")
  expiresAt         Int?      @map("expires_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  
  // Relations
  user              User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique @map("session_token") @db.Text()
  userId       Int
  expires      DateTime
  createdAt    DateTime  @default(now()) @map("created_at")
  ipAdress    String?   @db.VarChar(100)
  userAgent    String?   @db.VarChar(255)
  user         User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String    @db.VarChar(100)
  token      String    @unique @db.Text()
  expires    DateTime
  type       String    @db.VarChar(100)
  otp        String?   @db.VarChar(6)
  username   String    @db.VarChar(50)
  createdAt  DateTime  @default(now()) @map("created_at")
  
  // Relations
  user       User     @relation(fields: [username], references: [username])

  @@unique([identifier, token], name: "verification_token_identifier_token_unique")
  @@index([username], name: "verification_token_username_idx")
  @@map("verification_tokens")
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  code          String?       @unique
  status        String        @default("active")
  thumbnail     String
  type          String        @default("game") @map("type")
  description   String?       @db.Text
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  logo          String?       @db.VarChar(255)

  subCategories SubCategory[]
  products      Product[]

  @@index([type, status])
  @@map("categories")
}

model SubCategory {
  id         Int        @id @default(autoincrement())
  categoryId Int        @map("category_id")
  code       String     @map("code")
  name       String     @map("name")
  active     Boolean    @default(true) @map("active")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  
  // Relations
  category   Category   @relation(fields: [categoryId], references: [id])
  products   Product[]

  @@index([categoryId])
  @@map("sub_categories")
}

model Method {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(55)
  images      String    @db.Text()
  code        String    @db.VarChar(100)
  keterangan  String    @db.VarChar(250)
  tipe        String    @db.VarChar(225)
  min         Int?
  max         Int?
  isActive    Boolean   @default(true) @map("is_active")
  typeTax     String?   @map("type_tax")
  taxAdmin    Int?      @map("tax_admin")
  minExpired  Int?      @default(0) @map("min_expired")
  maxExpired  Int?      @default(0) @map("max_expired")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  @@index([code])
  @@index([isActive])
  @@index([isActive,code])
  @@map("methods")
}

model Product {
  id                 Int          @id @default(autoincrement())
  categoryId         Int          @map("category_id")
  subCategoryId      Int?         @map("sub_category_id")
  name               String
  providerId         String       @map("provider_id")  @unique()
  provider           String
  price              Decimal      @map("price")
  regularPrice       Decimal?      @map("regular_price")
  resellerPrice      Decimal?     @map("reseller_price")
  memberPrice        Decimal?     @map("member_price")
  isFlashSale        Boolean      @default(false) @map("is_flash_sale")
  flashSalePrice     Decimal?     @map("flash_sale_price")
  flashSaleUntil     DateTime?    @map("flash_sale_until")
  note               String?      @db.Text
  
  status             Boolean      @default(true)
  productImage       String?      @map("product_image")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")
  
  profit             Decimal      @map("profit") 
  profitReseller     Decimal      @map("profit_reseller") 
  profitPlatinum     Decimal      @map("profit_platinum") 
  profitGold         Decimal      @map("profit_gold") 
  
  isProfitPercentage        Boolean @default(false) @map("is_profit_percentage")
  isResellerProfitPercentage Boolean @default(false) @map("is_reseller_profit_percentage")
  isPlatinumProfitPercentage Boolean @default(false) @map("is_platinum_profit_percentage")
  isGoldProfitPercentage     Boolean @default(false) @map("is_gold_profit_percentage")
  
  titleFlashSale     String?      @db.VarChar(255) @map("title_flash_sale") 
  bannerFlashSale    String?      @db.VarChar(255) @map("banner_flash_sale") 
  
  productLogo        String?      @map("product_logo")

  // Relations
  subCategory        SubCategory? @relation(fields: [subCategoryId], references: [id])
  // Relations
  category           Category?     @relation(fields: [categoryId], references: [id])
  transactionItems   TransactionItem[]
  
  @@index([categoryId, status])
  @@index([subCategoryId, status])
  @@index([providerId, status])
  @@index([isFlashSale])
  @@map("products")
}

model Transaction {
  id              Int             @id @default(autoincrement())
  transactionId   String          @unique
<<<<<<< HEAD
  username        String          @map("username")  @db.VarChar(50)
  amount          Decimal
  type            String
  method          String
  isManual        Boolean         @default(false) @map("is_manual")
=======
  username         String         @db.VarChar(50)
  amount          Decimal
  type            String
  method          String
  status          String          @default("PENDING")
>>>>>>> 2b5378bbca6f2ecdb174ef2dc7fc8c4486bf0325
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  completedAt     DateTime?       @map("completed_at")
  
  user            User            @relation(fields: [username], references: [username])
  items           TransactionItem[]
  payment         Payment?
  membership      Membership?     @relation("TransactionMembership")
  manualOrder     ManualOrder?

  @@index([username])
  @@index([type])
<<<<<<< HEAD
=======
  @@index([status])
>>>>>>> 2b5378bbca6f2ecdb174ef2dc7fc8c4486bf0325
  @@map("transactions")
}

model TransactionItem {
  id              Int          @id @default(autoincrement())
  transactionId   String
  transactionItemId String  @unique()
  productCode    String    
  quantity        Int          @default(1)
  price           Decimal
  status          String?      @default("PENDING")
  gameId          String?      @map("game_id")
  gameServer      String?      @map("game_server")
  nickName        String?      @map("nickname")
  message         String?      @map("message")
  serialNumber    String?      @map("serial_number")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  provider        String?

  isReorder         Boolean      @default(false) @map("reorder")


  // Relations
  transaction     Transaction  @relation(fields: [transactionId], references: [transactionId])
  product         Product?     @relation(fields: [productCode], references: [providerId])
  processRequests ProcessRequest[]

  @@index([transactionId])
  @@index([transactionItemId])
  @@index([productCode])
  @@map("transaction_items")
}

model Payment {
  id              Int          @id @default(autoincrement())
  transactionId   String       @unique
  amount          Decimal
  method          String
  reference       String?
  customerPhone      String    @map("customer_number")
  status          String       @default("PENDING")
  paymentNumber   String?      @map("payment_number")
  callbackData    Json?        @map("callback_data")
  callbackAt      DateTime?    @map("callback_at")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  
  // Relations
  transaction     Transaction  @relation(fields: [transactionId], references: [transactionId])

  @@index([status])
  @@map("payments")
}

model Membership {
  id            Int       @id @default(autoincrement())
  username      String
  planType      String    @map("plan_type") 
  amount        Decimal
  isPermanent   Boolean   @default(false) @map("is_permanent")
  status        String    @default("PENDING")
  startDate     DateTime? @map("start_date")
  endDate       DateTime? @map("end_date")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user          User      @relation(fields: [username], references: [username])
  transaction   Transaction? @relation("TransactionMembership", fields: [transactionId], references: [transactionId]) 
  transactionId String?   @unique  @map("transaction_id") 
  
  @@index([username])
  @@index([status])
  @@index([planType])
  @@map("memberships")
}

model ProcessRequest {
  id                Int           @id @default(autoincrement())
  transactionItemId Int           @map("transaction_item_id")
  processedBy       String        @map("processed_by")
  notes             String?       @db.Text
  status            String        @default("PENDING") 
  requestData       Json?         @map("request_data")
  responseData      Json?         @map("response_data")
  completedAt       DateTime?     @map("completed_at")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  // Relations
  transactionItem   TransactionItem @relation(fields: [transactionItemId], references: [id])
  
  @@index([transactionItemId])
  @@index([status])
  @@map("process_requests")
}

model ManualOrder {
  id              Int         @id @default(autoincrement())
  transactionId   String      @unique @map("transaction_id")
  processedBy     String      @map("processed_by")
  status          String      @default("PENDING") 
  notes           String?     @db.Text
  requestData     Json?       @map("request_data")
  responseData    Json?       @map("response_data")
  completedAt     DateTime?   @map("completed_at")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  gameId          String?     @map("game_id")
  gameServer      String?     @map("game_server")
  nickName        String?     @map("nickname")
  serialNumber    String?     @map("serial_number")
  messagee         String?     @map("message")
  
  // Relations
  transaction     Transaction @relation(fields: [transactionId], references: [transactionId])
  
  @@index([status])
  @@index([transactionId])
  @@map("manual_orders")
}

