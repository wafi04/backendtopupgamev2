generator client {
  provider = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
  relationMode = "prisma"
}

model Users {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(100)
  username         String             @unique @db.VarChar(50)
  password         String             @db.VarChar(255)
  email            String?            @unique @db.VarChar(100)
  whatsapp         String?            @db.VarChar(20)
  balance          Int                @default(0)
  role             String             @db.VarChar(20) @default("Member")
  apiKey           String?            @unique @db.VarChar(64) @map("api_key")
  isDeleted        Boolean            @default(false) @map("is_deleted")
  deletedAt        DateTime?          @map("deleted_at")
  isEmailVerified  Boolean            @default(false)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  
  // Relations
  tokenVerification VerificationToken[]
  accounts          Account[]
  sessions          Session[]
  transactions      Transaction[]
  memberships       Membership[]

  @@index([username, balance], name: "users_username_balance_idx")
  @@index([role, balance], name: "users_role_balance_idx")
  @@index([whatsapp], name: "users_whatsapp_idx")
  @@index([username, role, whatsapp], name: "users_username_role_whatsapp_idx")
  @@map("users")
}

model Account {
  id                String    @id @default(cuid())
  userId            Int
  type              String    @db.VarChar(20)
  provider          String    @db.VarChar(50)
  providerAccountId String    @map("provider_account_id") @db.VarChar(100)
  refreshToken      String?   @db.Text @map("refresh_token")
  accessToken       String?   @db.Text @map("access_token")
  expiresAt         Int?      @map("expires_at")
  tokenType         String?   @map("token_type") @db.VarChar(20)
  scope             String?   @map("scope") @db.VarChar(100)
  idToken           String?   @db.Text @map("id_token")
  sessionState      String?   @map("session_state") @db.VarChar(100)
  createdAt         DateTime  @default(now()) @map("created_at")
  
  // Relations
  user              Users     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId], name: "account_provider_unique")
  @@index([userId], name: "account_user_id_idx")
  @@map("accounts")
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique @map("session_token") @db.Text()
  userId       Int
  expires      DateTime
  ipAddress    String?   @map("ip_address") @db.VarChar(45)
  userAgent    String?   @db.Text @map("user_agent")
  createdAt    DateTime  @default(now()) @map("created_at")
  
  user         Users     @relation(fields: [userId], references: [id])

  @@index([userId], name: "session_user_id_idx")
  @@map("sessions")
}

model VerificationToken {
  identifier String    @db.VarChar(100)
  token      String    @unique @db.Text()
  expires    DateTime
  type       String    @db.VarChar(100)
  otp        String?   @db.VarChar(6)
  username   String    @db.VarChar(50)
  createdAt  DateTime  @default(now()) @map("created_at")
  
  // Relations
  user       Users     @relation(fields: [username], references: [username])

  @@unique([identifier, token], name: "verification_token_identifier_token_unique")
  @@index([username], name: "verification_token_username_idx")
  @@map("verification_tokens")
}

model Categories {
  id            Int           @id @default(autoincrement())
  nama          String
  subNama       String        @map("sub_nama")
  brand         String        @db.Text @map("brand")
  kode          String?       @unique @map("kode")
  serverId      Int           @default(0) @map("server_id")
  status        String        @default("active") @map("status")
  thumbnail     String        @map("thumbnail")
  tipe          String        @default("game") @map("tipe")
  petunjuk      String?       @map("petunjuk")
  ketLayanan    String?       @db.Text @map("ket_layanan")
  ketId         String?       @db.Text @map("ket_id")
  placeholder1  String        @db.Text @map("placeholder_1")
  placeholder2  String        @db.Text @map("placeholder_2")
  bannerLayanan String        @map("bannerlayanan")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  
  // Relations
  subCategories SubCategory[]
  layanan       Layanan[]

  @@index([tipe, status])
  @@map("kategoris")
}

model SubCategory {
  id         Int        @id @default(autoincrement())
  categoryId Int        @map("category_id")
  code       String     @map("code")
  name       String     @map("name")
  active     Boolean    @map("active")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  
  // Relations
  category   Categories @relation(fields: [categoryId], references: [id])
  layanan    Layanan[]

  @@index([code, categoryId, active])
  @@index([categoryId])
  @@map("sub_categories")
}

model Method {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(55)
  images      String    @db.Text()
  code        String    @db.VarChar(100)
  keterangan  String    @db.VarChar(250)
  tipe        String    @db.VarChar(225)
  min         Int?
  max         Int?
  isActive    Boolean   @default(true) @map("is_active")
  typeTax     String?   @map("type_tax")
  taxAdmin    Int?      @map("tax_admin")
  minExpired  Int?      @default(0) @map("min_expired")
  maxExpired  Int?      @default(0) @map("max_expired")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  @@index([code])
  @@index([isActive])
  @@index([isActive,code])
  @@map("methods")
}

model Layanan {
  id                 Int          @id @default(autoincrement()) @map("id")
  kategoriId         Int          @map("kategori_id")
  detailsId          String?      @map("details_id") 
  subCategoryId      Int          @default(0) @map("sub_category_id")
  layanan            String       @map("layanan")
  providerId         String       @map("provider_id")


  harga              Decimal      @map("harga")
  hargaReseller      Decimal      @map("harga_reseller")
  hargaPlatinum      Decimal      @map("harga_platinum")
  hargaGold          Decimal      @map("harga_gold")
  hargaFlashSale     Decimal?     @default(0) @map("harga_flash_sale")
  
  profit             Decimal      @map("profit") @default(4)
  profitReseller     Decimal      @map("profit_reseller") @default(4)
  profitPlatinum     Decimal      @map("profit_platinum") @default(4)
  profitGold         Decimal      @map("profit_gold") @default(4)
  
  isProfitPercentage        Boolean @default(false) @map("is_profit_percentage")
  isResellerProfitPercentage Boolean @default(false) @map("is_reseller_profit_percentage")
  isPlatinumProfitPercentage Boolean @default(false) @map("is_platinum_profit_percentage")
  isGoldProfitPercentage     Boolean @default(false) @map("is_gold_profit_percentage")
  
  isFlashSale        Boolean      @map("is_flash_sale")
  judulFlashSale     String?      @db.VarChar(255) @map("judul_flash_sale") 
  bannerFlashSale    String?      @db.VarChar(255) @map("banner_flash_sale") 
  expiredFlashSale   DateTime?    @db.Date @map("expired_flash_sale")
  catatan            String       @db.Text @map("catatan") 
  
  status             Boolean      @map("status")
  provider           String       @map("provider")
  productLogo        String?      @map("product_logo")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")
  
  // Relations
  category           Categories   @relation(fields: [kategoriId], references: [id])
  subCategory        SubCategory? @relation(fields: [subCategoryId], references: [id])
  
  @@index([kategoriId, status])
  @@index([subCategoryId, status])
  @@index([providerId, status])
  @@index([isFlashSale, expiredFlashSale])
  @@index([status, isFlashSale])
  @@map("layanans")
}

model TransactionItems {
  id         Int       @id @default(autoincrement())
  cartId     Int       @map("cart_id")
  productId  Int?      @map("product_id")
  quantity   Int       @default(1)
  price      Decimal
  profit     Decimal

  nickname          String?          @map("nickname")
  gameId            String?          @map("game_id")
  gameServer        String?          @map("game_server")
  
  // Relations
  processUlang      ProcessUlang[]
  metadata          Json?
  providerId        String?
  
  transactionId     String           @map("transaction_id")
  transaction       Transaction?     @relation(fields: [transactionId], references: [transactionId])

  // Digiflazz tracking fields
  digiflazzRefId    String?          @map("digiflazz_ref_id")
  status   String?          @map("status")
  message  String?                   @map("message")
  sn       String?                   @map("sn")
  digiflazzCallback Json?            @map("digiflazz_callback")
  digiflazzCallbackAt DateTime?      @map("digiflazz_callback_at")

  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@index([cartId])
  @@index([transactionId])
  @@index([digiflazzRefId])
  @@index([status])
}

model Pembayaran {
  id             Int       @id @default(autoincrement()) @map("id")
  transactionId  String    @unique @map("transaction_id")
  harga          Decimal   @map("harga")
  noPembayaran   String?   @db.Text @map("no_pembayaran")
  noPembeli      String    @map("no_pembeli")
  status         String    @map("status")
  metode         String    @map("metode")
  reference      String?   @map("reference")
  createdAt      DateTime? @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  
  // Relations
  transaction    Transaction  @relation(fields: [transactionId], references: [transactionId])

  // Duitku specific fields
  duitkuMerchantCode   String?   @map("duitku_merchant_code")
  duitkuReference      String?   @unique @map("duitku_reference")
  duitkuCallbackData   Json?     @map("duitku_callback_data")
  duitkuCallbackAt     DateTime? @map("duitku_callback_at")

  @@index([metode])
  @@index([transactionId])
  @@index([status])
  @@index([transactionId, metode, status])
  @@index([duitkuReference])
  @@map("pembayarans")
}

model Transaction {
  id                Int              @id @default(autoincrement())
  transactionId     String           @unique @map("transaction_id")
  username          String           @map("username")
  amount            Decimal
  type              String           @db.VarChar(30) 
  method            String
  description       String?          @db.Text
  status            String?          @map("status")
  
  paymentReference  String?          @map("payment_reference")
  paymentData       Json?            @map("payment_data")
  paymentUpdatedAt  DateTime?        @map("payment_updated_at")
  
  // Transaction timestamps
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  completedAt       DateTime?        @map("completed_at")
    
  // Relations
  user              Users            @relation(fields: [username], references: [username])
  transactionItems  TransactionItems[]       
  pembayaran        Pembayaran?
  membership        Membership?      @relation("TransactionMembership")
  manualOrder       ManualOrder?

  // New fields for tracking order processing
  isManualOrder     Boolean          @default(false) @map("is_manual_order")
  isReorder         Boolean          @default(false) @map("is_reorder")
  processedBy       String?          @map("processed_by")
  processedAt       DateTime?        @map("processed_at")
  processingNote    String?          @db.Text @map("processing_note")
  
  @@index([username])
  @@index([type])
  @@index([method])
  @@index([status])
  @@index([transactionId])
  @@index([isManualOrder])
  @@index([isReorder])
  
  @@map("transactions")
}

model Membership {
  id            Int       @id @default(autoincrement())
  username      String    @map("username")
  planType      String    @map("plan_type") 
  amount        Decimal
  isPermanent   Boolean   @default(false) @map("is_permanent")
  status        String    @default("PENDING")

  startDate     DateTime? @map("start_date")
  endDate       DateTime? @map("end_date")
  
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  expiredAt     DateTime? @map("expired_at")
  
  users         Users     @relation(fields: [username], references: [username])
  transaction   Transaction? @relation("TransactionMembership", fields: [transactionId], references: [transactionId]) 
  transactionId String?  @unique  @map("transaction_id") 
  
  @@index([username])
  @@index([status])
  @@index([planType])
  @@index([transactionId])
  @@map("memberships")
}

model MembershipBenefit {
  id           Int      @id @default(autoincrement())
  planType     String   @map("plan_type")
  benefitName  String   @map("benefit_name")
  description  String   @db.Text
  value        String[]   
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([planType])
  @@map("membership_benefits")
}

model ProcessUlang {
  id              Int       @id @default(autoincrement())
  transactionItem TransactionItems @relation(fields: [transactionItemId], references: [id])
  transactionItemId Int     @map("transaction_item_id")
  transactioinId  String    @map("transaction_id")
 
 processedBy     String   @map("processed_by")
  noted           String?   @map("noted")
  status          String    @default("PENDING") 

  requestData     Json?     @map("request_data")
  responseData    Json?     @map("response_data")
  
  completedAt     DateTime? @map("completed_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  user            UserProsesManual       @relation(fields: [processedBy], references: [username])
  @@index([transactioinId])
  @@index([transactionItemId])
  @@index([status])
  @@map("process_ulang")
}

model UserProsesManual {
  id            Int       @id @default(autoincrement())
  username      String    @unique @map("username")
  code          String    @map("code")
  noted         String?   @map("noted")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")


  manualOrderId Int       @map("manual_order_id")
  manualOrders      ManualOrder[]     
  processUlangs ProcessUlang[]
  

  @@index([code])
  @@index([username])
  @@map("user_proses_manual")
}


model ManualOrder {
  id              Int         @id @default(autoincrement())
  transactionId   String      @unique @map("transaction_id")
  username        String      @map("username")
  requestedBy     String?     @map("requested_by")
  status          String      @default("PENDING") 
  requestData     Json?       @map("request_data")
  responseData    Json?       @map("response_data")
  notes           String?     @db.Text
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  completedAt     DateTime?   @map("completed_at")
  
  // Relations
  user            UserProsesManual       @relation(fields: [username], references: [username])
  transaction     Transaction @relation(fields: [transactionId], references: [transactionId])
  
  @@index([username])
  @@index([status])
  @@index([transactionId])
  @@map("manual_orders")
}


model IntegrationLog {
  id              Int       @id @default(autoincrement())
  type            String    // DUITKU_REQUEST, DUITKU_CALLBACK, DIGIFLAZZ_REQUEST, DIGIFLAZZ_CALLBACK
  requestData     Json?     @map("request_data")
  responseData    Json?     @map("response_data")
  status          String    // SUCCESS, ERROR, PENDING
  transactionId   String?   @map("transaction_id")
  referenceId     String?   @map("reference_id")
  errorMessage    String?   @db.Text @map("error_message")
  createdAt       DateTime  @default(now()) @map("created_at")
  
  @@index([type])
  @@index([status])
  @@index([transactionId])
  @@index([referenceId])
  @@map("integration_logs")
}