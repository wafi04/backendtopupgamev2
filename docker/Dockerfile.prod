# Stage 1: Build
FROM node:22-alpine AS builder
WORKDIR /app

COPY package*.json ./
COPY tsconfig.json ./
COPY .env.production ./

RUN npm install ts-patch --save-dev && npm ci
RUN npm install module-alias --save


# Copy source code
COPY . .

RUN npx prisma generate

RUN npm run build

FROM node:22-alpine
WORKDIR /app
ENV NODE_ENV=production

RUN apk add --no-cache python3 make g++ gcc

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY .env.production ./
COPY prisma ./prisma/
RUN npx prisma generate

# Configure the tsconfig-paths
RUN echo 'const { resolve } = require("path"); \
module.exports = { \
  baseUrl: resolve(__dirname), \
  paths: { \
    "@/*": ["./dist/*"] \
  } \
}' > tsconfig-paths.config.js

# Important: First install with --production=false to ensure all deps are installed
RUN npm install module-alias --production --save
RUN npm install --production=false


# Copy built app and node_modules from builder
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules

# Generate Prisma Client untuk container dan berikan izin eksekusi
RUN npx prisma generate
RUN find ./node_modules/.prisma -type f -name "query-engine-*" -exec chmod +x {} \;
RUN find ./node_modules/@prisma -type f -name "query-engine-*" -exec chmod +x {} \;

# Rebuild bcrypt for the current architecture
RUN npm rebuild bcrypt --build-from-source

COPY .env.production ./.env.production 

# Create the start script and make it executable
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'echo "Waiting for database..."' >> /app/start.sh && \
    echo 'npx prisma migrate deploy' >> /app/start.sh && \
    echo 'node -r tsconfig-paths/register -r module-alias/register --require=./tsconfig-paths.config.js dist/app.js' >> /app/start.sh && \
    chmod +x /app/start.sh 

# Verify the start script exists and is executable
RUN ls -la /app/start.sh && cat /app/start.sh

# Verify the modules are installed
RUN ls -la ./node_modules/tsconfig-paths || echo "tsconfig-paths not found"
RUN ls -la ./node_modules/module-alias || echo "module-alias not found"

CMD ["/app/start.sh"]

